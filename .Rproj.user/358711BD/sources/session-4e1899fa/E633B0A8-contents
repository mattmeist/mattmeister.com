# Setup
## Create pvalue function for presenting p-values
pval <- function(p, digits = 3) {
  rp <- round(p,digits)
  if(rp < .001){
    return("< .001")
  }
  else{
    return(paste("=", rp, sep = " "))
  }
}

## Install groundhog if needed
if (!requireNamespace("groundhog", quietly = TRUE)) {
  install.packages("groundhog", dependencies = TRUE)
}

## Load groundhog
library(groundhog)

## Load packages with groundhog
ghog.date <- "2024-12-01"
pkgs <- c("data.table", "lfe", "dplyr", "doParallel", "ggplot2", 
          "tidyr", "stringr", "cowplot", "did", "DescTools")
groundhog.library(pkgs, ghog.date)

# FUNCTIONS TO SUMMARIZE did RESULTS
did_summary_dynamic <- function(data, yname, tname, idname, clustervars, gname, allow_unbalanced_panel = T, xformla = NULL,
                                data_name = NULL){
  did_att <- att_gt(
    data = data,
    yname = yname,
    tname = tname,
    idname = idname,
    clustervars = clustervars,
    gname = gname,
    allow_unbalanced_panel = allow_unbalanced_panel,
    xformla = xformla
  )
  dd <- aggte(did_att, type = "dynamic")
  
  # Data for plotting later
  plot_df <- data.frame(
    tname = dd$egt,
    att = dd$att.egt,
    ub = dd$att.egt + dd$crit.val.egt * dd$se.egt,
    lb = dd$att.egt - dd$crit.val.egt * dd$se.egt
  )
  
  res_df <- data.frame(
    lb = dd$overall.att - 1.96 * dd$overall.se,
    ub = dd$overall.att + 1.96 * dd$overall.se,
    att = dd$overall.att,
    se = dd$overall.se,
    obs = nrow(dd$DIDparams$data),
    mdv = mean(dd$DIDparams$data[,yname]),
    ptpv = did_att$Wpval[1,1],
    xformla = ifelse(is.null(xformla), NA_character_, as.character(xformla)[2]),
    data_name = ifelse(is.null(data_name), NA_character_, data_name)
  )
  list(res_df, plot_df)
}

combine_did_summary_dynamic <- function(data_list, yname, tname, idname, clustervars, 
                                        gname, allow_unbalanced_panel = T, xformla = NULL,
                                        include_models_without_controls = T,
                                        data_names = NULL){
  if(!is.null(data_names) & (length(data_names) != length(data_list))){
    stop("data_names must either be NULL, or of the same length as data_list")
  }
  if(is.null(data_names)){
    data_names <- as.factor(1:length(data_list))
  }
  
  if(!is.list(xformla) & !is.null(xformla)){
    stop("The argument for xformla needs to be a list. Usually this error arises if you do not write xformla as a formula.
         Or just keep it NULL.")
  }
  if(is.null(xformla)){
    xformla <- NA_character_
    include_models_without_controls <- T
  }
  data_num <- 1:length(data_list)
  if(include_models_without_controls == F){
    specs <- expand.grid(yname = yname, 
                         tname = tname, 
                         idname = idname, 
                         clustervars = clustervars, 
                         gname = gname, 
                         allow_unbalanced_panel = allow_unbalanced_panel, 
                         xformla = xformla,
                         controls = 1,
                         data_num = data_num)
  } else if(is.na(xformla)){
    specs <- expand.grid(yname = yname, 
                         tname = tname, 
                         idname = idname, 
                         clustervars = clustervars, 
                         gname = gname, 
                         allow_unbalanced_panel = allow_unbalanced_panel, 
                         xformla = xformla,
                         controls = 0,
                         data_num = data_num)
  } else {
    specs <- expand.grid(yname = yname, 
                         tname = tname, 
                         idname = idname, 
                         clustervars = clustervars, 
                         gname = gname, 
                         allow_unbalanced_panel = allow_unbalanced_panel, 
                         xformla = xformla,
                         controls = 0,
                         data_num = data_num) |>
      rbind(expand.grid(yname = yname, 
                        tname = tname, 
                        idname = idname, 
                        clustervars = clustervars, 
                        gname = gname, 
                        allow_unbalanced_panel = allow_unbalanced_panel, 
                        xformla = xformla,
                        controls = 1,
                        data_num = data_num))
  }
  specs$data_name <- NA_character_
  for(i in 1:nrow(specs)){
    specs$data_name[i] <- data_names[specs$data_num[i]]
  }
  specs <- as.data.frame(specs)
  
  for(i in 1:nrow(specs)){
    did_sum <- did_summary_dynamic(yname = as.character(specs$yname[i]),
                                   tname = as.character(specs$tname[i]),
                                   idname = as.character(specs$idname[i]),
                                   clustervars = as.character(specs$clustervars[i]),
                                   gname = as.character(specs$gname[i]),
                                   data = data_list[[as.numeric(specs$data_num[i])]],
                                   allow_unbalanced_panel = specs$allow_unbalanced_panel[i],
                                   xformla = if (specs$controls[i] == 0) {
                                     NULL
                                   } else {
                                     specs$xformla[[i]]
                                   },
                                   data_name = specs$data_name[i]
    )
    
    if(i == 1){
      plot_df_list <- vector(mode = "list", length = nrow(specs))
      res_df <- did_sum[[1]]
      plot_df_list[[i]] <- did_sum[[2]]
    } else {
      res_df <- res_df |>
        rbind(did_sum[[1]])
      plot_df_list[[i]] <- did_sum[[2]]
    }
    
  }
  list(res_df, plot_df_list)
}

# Read in Airbnb data
d <- fread('Data/Ratings_Total.csv')

## Count amenities
d$Amenities <- as.numeric(str_count(d$amenities, ", "))

# Read in listings
listings <- fread("Data/Listings_Total.csv") |>
  distinct()

listings <- listings |>
  #create unique ID for listing and quarter
  mutate(id_Quarter = paste(id, Quarter, sep = "_")) |>
  # remove any duplicated scrapes
  filter(!duplicated(id_Quarter)) |>
  as.data.table()

# Count stuff
n_listings_obs <- nrow(listings)
total_listings <- length(unique(listings$id))
total_hosts <- length(unique(listings$host_id))

# Count total with > 1 obs--we can't make use of listings with just one
listings <- listings |>
  group_by(id) |>
  mutate(count = n()) |>
  ungroup() |>
  filter(count > 1)

# Put listings in order so we can calculate changes in ratings, stars
listings <- listings |>
  arrange(id, desc(Quarter)) 

# Algebra -- number of stars in total
listings$total_stars <- listings$number_of_reviews * listings$review_scores_rating

# How many ratings since the last quarter?
listings$ratings_LQ <- ifelse(listings$id != listings$id[-1], NA_real_,
                              ifelse(listings$Quarter != listings$Quarter[-1] + 1, NA_real_,
                                     listings$number_of_reviews - listings$number_of_reviews[-1]))

# How many stars in total since the last quarter?
listings$stars_LQ <- ifelse(listings$id != listings$id[-1], NA_real_,
                            ifelse(listings$Quarter != listings$Quarter[-1] + 1, NA_real_,
                                   listings$total_stars - listings$total_stars[-1]))

# Average stars since last Q
listings$avg_LQ <- listings$stars_LQ / listings$ratings_LQ

# How many listings have ratings in more than one Q?
listings <- listings[listings$ratings_LQ > 0,]
listings <- listings |>
  group_by(id) |>
  mutate(count = n()) |>
  ungroup() |>
  filter(count > 1)

# Counts--these numbers will be used to make the table of ALL Airbnb obs
n_listings_obs_2 <- nrow(listings)
total_listings_2 <- length(unique(listings$id))

big_always <- format(length(unique(listings[listings$group == "Always",]$id)), big.mark = ",")
big_always_pct <- paste(round(length(unique(listings[listings$group == "Always",]$id))/
                                length(unique(listings$id)), 3)*100, "%", sep = "")

big_never <- format(length(unique(listings[listings$group == "Never",]$id)), big.mark = ",")
big_never_pct <- paste(round(length(unique(listings[listings$group == "Never",]$id))/
                               length(unique(listings$id)), 3)*100, "%", sep = "")

big_sometimes <- format(length(unique(listings[listings$group == "Sometimes",]$id)), big.mark = ",")
big_sometimes_pct <- paste(round(length(unique(listings[listings$group == "Sometimes",]$id))/
                                   length(unique(listings$id)), 3)*100, "%", sep = "")

big_gain <- format(length(unique(listings[listings$did_group == "Gain",]$id)), big.mark = ",")
big_gain_pct <- paste(round(length(unique(listings[listings$did_group == "Gain",]$id))/
                              length(unique(listings[listings$group == "Sometimes",]$id)), 
                            3)*100, "%", sep = "")

big_lose <- format(length(unique(listings[listings$did_group == "Lose",]$id)), big.mark = ",")
big_lose_pct <- paste(round(length(unique(listings[listings$did_group == "Lose",]$id))/
                              length(unique(listings[listings$group == "Sometimes",]$id)), 
                            3)*100, "%", sep = "")

big_both <- format(length(unique(listings[listings$did_group == "Both",]$id)), big.mark = ",")
big_both_pct <- paste(round(length(unique(listings[listings$did_group == "Both",]$id))/
                              length(unique(listings[listings$group == "Sometimes",]$id)), 
                            3)*100, "%", sep = "")

# Calculate if a listing will gain/will lose
listings <- listings |>
  arrange(id, Quarter)

listings$will_gain <- ifelse(listings$superhost == 1, NA_real_,
                             ifelse(listings$id != listings$id[-1], NA_real_,
                                    ifelse(listings$superhost[-1] == 1, 1, 0)))

listings$will_lose <- ifelse(listings$superhost == 0, NA_real_,
                             ifelse(listings$id != listings$id[-1], NA_real_,
                                    ifelse(listings$superhost[-1] == 0, 1, 0)))

sh_avg <- listings |> 
  group_by(Quarter) |>
  summarise(superhost = mean(superhost, na.rm = T))|> 
  summarise(mean(superhost))

sh_count <- listings |> 
  filter(!is.na(superhost)) |>
  group_by(Quarter, superhost) |>
  summarise(ids = length(unique(id, na.rm = T)))|> 
  group_by(superhost) |>
  summarise(round(mean(ids)))

lose_avg <- listings |>
  group_by(Quarter) |>
  summarise(superhost = mean(will_lose, na.rm = T))|> 
  summarise(mean(superhost, na.rm = T))

lose_count <- listings |> 
  filter(!is.na(will_lose)) |>
  group_by(Quarter, will_lose) |>
  summarise(ids = length(unique(id, na.rm = T)))|> 
  group_by(will_lose) |>
  summarise(round(mean(ids)))

gain_avg <- listings |>
  group_by(Quarter) |>
  summarise(superhost = mean(will_gain, na.rm = T))|> 
  summarise(mean(superhost, na.rm = T))

gain_count <- listings |> 
  filter(!is.na(will_gain)) |>
  group_by(Quarter, will_gain) |>
  summarise(ids = length(unique(id, na.rm = T)))|> 
  group_by(will_gain) |>
  summarise(round(mean(ids)))

listings <- listings |>
  select(id, Quarter, will_lose, will_gain) |>
  mutate(id = as.character(id))

d <- d |>
  left_join(listings)

# Narrow down to only snapshots we have observations of
listings <- d |>
  group_by(id, Quarter, superhost, host_id, group, did_group, did_group_first,
           host_listings_count, host_response_rate, accommodates, Amenities, 
           will_lose, will_gain, avg_LY, ratings_LY) |>
  summarise(ratings_LQ = n(), rating = mean(rating, na.rm = T))

# Calculations trying to figure out how listings gain/lose status
listings <- listings |>
  arrange(id, desc(Quarter))

listings$RR_lag <- ifelse(listings$id == listings$id[-1],
                          ifelse(listings$Quarter == listings$Quarter[-1]+1,
                                 listings$host_response_rate[-1], NA_real_), NA_real_)
listings$RR_2lag <- ifelse(listings$id == listings$id[-c(1:2)],
                           ifelse(listings$Quarter == listings$Quarter[-c(1:2)+2],
                                  listings$host_response_rate[-c(1:2)], NA_real_), NA_real_)
listings$RR_3lag <- ifelse(listings$id == listings$id[-c(1:3)],
                           ifelse(listings$Quarter == listings$Quarter[-c(1:3)]+3,
                                  listings$host_response_rate[-c(1:3)], NA_real_), NA_real_)
listings$RR_LY <- rowMeans(cbind(listings$host_response_rate, listings$RR_lag, listings$RR_2lag, listings$RR_3lag), na.rm = T)

# Web appendix C stats -- calculating now because it is referenced here in text
listings_wa3 <- listings
could_gain <- listings[!is.na(listings$will_gain) &
                         !is.na(listings$RR_LY) &
                         !is.na(listings$avg_LY) &
                         !is.na(listings$ratings_LY),] |>
  filter(avg_LY > 4.75 & avg_LY < 4.85 & ratings_LY >= 10 & RR_LY >= 90) |>
  mutate(Sample = "All Hosts", Status = ifelse(will_gain == 0, "Remain Non-SH", "Gain SH"),
         id_Quarter = paste(id, Quarter, sep = "_"),
         id_Quarter_post = paste(id, Quarter + 1, sep = "_"))


small_always <- format(length(unique(listings[listings$group == "Always",]$id)), big.mark = ",")
small_always_pct <- paste(round(length(unique(listings[listings$group == "Always",]$id))/
                                  length(unique(listings$id)), 3)*100, "%", sep = "")

small_never <- format(length(unique(listings[listings$group == "Never",]$id)), big.mark = ",")
small_never_pct <- paste(round(length(unique(listings[listings$group == "Never",]$id))/
                                 length(unique(listings$id)), 3)*100, "%", sep = "")

small_sometimes <- format(length(unique(listings[listings$group == "Sometimes",]$id)), big.mark = ",")
small_sometimes_pct <- paste(round(length(unique(listings[listings$group == "Sometimes",]$id))/
                                     length(unique(listings$id)), 3)*100, "%", sep = "")

small_gain <- format(length(unique(listings[listings$did_group == "Gain",]$id)), big.mark = ",")
small_gain_pct <- paste(round(length(unique(listings[listings$did_group == "Gain",]$id))/
                                length(unique(listings[listings$group == "Sometimes",]$id)), 
                              3)*100, "%", sep = "")

small_lose <- format(length(unique(listings[listings$did_group == "Lose",]$id)), big.mark = ",")
small_lose_pct <- paste(round(length(unique(listings[listings$did_group == "Lose",]$id))/
                                length(unique(listings[listings$group == "Sometimes",]$id)), 
                              3)*100, "%", sep = "")

small_both <- format(length(unique(listings[listings$did_group == "Both",]$id)), big.mark = ",")
small_both_pct <- paste(round(length(unique(listings[listings$did_group == "Both",]$id))/
                                length(unique(listings[listings$group == "Sometimes",]$id)), 
                              3)*100, "%", sep = "")

# Summarize Airbnb data
## first, create table of hosts with just one listing
single_listing_hosts <- d |>
  group_by(host_id, id) |>
  summarise(revs = n()) |>
  group_by(host_id) |>
  summarise(N = n()) |>
  filter(N == 1)
d$single_listing_host_id <- ifelse(d$host_id %in% single_listing_hosts$host_id, d$host_id, NA_character_)

superhost.status.summary <- d |>
  mutate(did_group = factor(did_group, levels = c("Always", "Lose", "Both", "Gain", "Never"))) |>
  group_by(did_group) |>
  summarise(Ratings = format(n(),big.mark = ','),
            `Proportion as Superhost` = paste(sprintf("%.2f",100*round(mean(superhost, na.rm = T),4)), "%", sep = ''),
            `Unique Listings` = format(length(unique(id)),big.mark = ','),
            `Unique Hosts` = format(length(unique(host_id)),big.mark = ','),
            `Single-Listing Hosts` = format(length(unique(single_listing_host_id)),big.mark = ','),
            `Rating` = paste(sprintf("%.2f", round(mean(rating, na.rm = T),2)), sep = ''),
            `(SD Rating)` = paste(" (", sprintf("%.2f", round(sd(rating, na.rm = T),2)), ")", sep = ''),
            `Accommodates` = paste(sprintf("%.2f",round(mean(accommodates, na.rm = T),2)), sep = ''),
            `(SD Acc)` = paste(" (", sprintf("%.2f",round(sd(accommodates, na.rm = T),2)), ")", sep = ''),
            `Price` = paste(sprintf("%.2f",round(mean(price, na.rm = T),2)),  sep = ''),
            `(SD Price)` = paste(" (", sprintf("%.2f",round(sd(price, na.rm = T),2)), ")", sep = ''),
            `Response Rate` = paste(sprintf("%.2f",round(mean(host_response_rate, na.rm = T),2)), sep = ''),
            `(SD Response)` = paste(" (", sprintf("%.2f",round(sd(host_response_rate, na.rm = T),2)), ")", sep = ''),
            `Amenities Listed` = paste(sprintf("%.2f",round(mean(Amenities, na.rm = T),2)), sep = ''),
            `(SD Amenities)` = paste(" (", sprintf("%.2f",round(sd(Amenities, na.rm = T),2)), ")", sep = ''),) |>
  as.data.table()

superhost.status.summary.first <- d |>
  filter(did_group_first != "" & did_group_first != "Both") |>
  mutate(did_group = factor(did_group_first, levels = c("Always", "Lose", "Gain", "Never"))) |>
  group_by(did_group) |>
  summarise(Ratings = format(n(),big.mark = ','),
            `Proportion as Superhost` = paste(sprintf("%.2f",100*round(mean(superhost, na.rm = T),4)), "%", sep = ''),
            `Unique Listings` = format(length(unique(id)),big.mark = ','),
            `Unique Hosts` = format(length(unique(host_id)),big.mark = ','),
            `Single-Listing Hosts` = format(length(unique(single_listing_host_id)),big.mark = ','),
            `Rating` = paste(sprintf("%.2f", round(mean(rating, na.rm = T),2)), sep = ''),
            `(SD Rating)` = paste(" (", sprintf("%.2f", round(sd(rating, na.rm = T),2)), ")", sep = ''),
            `Accommodates` = paste(sprintf("%.2f",round(mean(accommodates, na.rm = T),2)), sep = ''),
            `(SD Acc)` = paste(" (", sprintf("%.2f",round(sd(accommodates, na.rm = T),2)), ")", sep = ''),
            `Price` = paste(sprintf("%.2f",round(mean(price, na.rm = T),2)),  sep = ''),
            `(SD Price)` = paste(" (", sprintf("%.2f",round(sd(price, na.rm = T),2)), ")", sep = ''),
            `Response Rate` = paste(sprintf("%.2f",round(mean(host_response_rate, na.rm = T),2)), sep = ''),
            `(SD Response)` = paste(" (", sprintf("%.2f",round(sd(host_response_rate, na.rm = T),2)), ")", sep = ''),
            `Amenities Listed` = paste(sprintf("%.2f",round(mean(Amenities, na.rm = T),2)), sep = ''),
            `(SD Amenities)` = paste(" (", sprintf("%.2f",round(sd(Amenities, na.rm = T),2)), ")", sep = ''),) |>
  as.data.table()

# Read in and join VRBO data
vrbo_revs <- fread('Data/vrbo_Reviews_Total.csv')
vrbo_revs$id <- NULL

vrbo <- vrbo_revs |>
  group_by(pid, Quarter) |>
  summarise(avg_LQ = mean(rating, na.rm = T),
            ratings_LQ = n()) |>
  ungroup()

match_dt <- fread('vrbo_bnb_matches.csv')
match_dt <- match_dt[,c("id", "pid", "idxpid", "reason")]
match_dt$id <- as.character(match_dt$id)
match_dt <- match_dt[!duplicated(match_dt$id),]
match_dt <- match_dt[!duplicated(match_dt$pid),]

# Prep bnb for joining to Vrbo
d <- d |>
  mutate(id = as.character(id)) |>
  left_join(match_dt) |>
  group_by(id, Quarter) |>
  mutate(ratings_LQ = n()) |>
  ungroup()

d$exp_group_first <- ifelse(d$exp_group != "Both", as.character(d$exp_group),
                            ifelse(d$changes > 1, "Both", 
                                   ifelse(d$first_sh < d$first_nsh, paste("L", d$first_nsh, sep = ""),
                                          ifelse(d$first_sh > d$first_nsh, paste("G", d$first_sh, sep = ""), NA_character_))))

d_forjoin <- d |>
  filter(!is.na(idxpid)) |>
  group_by(id, Quarter, pid, idxpid, group,
           did_group, did_group_first, exp_group, exp_group_first, price.win, 
           host_listings_count, host_id, host_response_rate, single_listing_host_id,
           first_sh, first_nsh) |>
  summarise(superhost = mean(superhost,na.rm = T))

vrbo_revs <- vrbo_revs |>
  inner_join(match_dt)

vrbo_revs <- vrbo_revs |>
  left_join(d_forjoin, by = join_by(pid, Quarter, id, idxpid))

vrbo_revs$year <- as.integer(substr(vrbo_revs$createdAt,1,4))
vrbo_revs$month <- as.integer(substr(vrbo_revs$createdAt,6,7))
vrbo_revs$date <- vrbo_revs$month + 12 * (vrbo_revs$year - 2021) - 07


d$year <- as.integer(substr(d$createdAt,1,4))
d$month <- as.integer(substr(d$createdAt,6,7))
d$date <- d$month + 12 * (d$year - 2021) - 07

d$matched <- ifelse(d$id %in% match_dt$id, "Matched", "Unmatched")

d$host_listings_count <- Winsorize(x = d$host_listings_count,
                                              val = quantile(d$host_listings_count, 
                                                             probs = c(0, 0.9),
                                                             na.rm = T))

# Combine airbnb and Vrbo into the same data
dl <- data.frame(
  id = as.factor(c(d$id, vrbo_revs$id)),
  host_id = as.factor(c(d$host_id, vrbo_revs$host_id)),
  single_listing_host_id = as.factor(c(d$single_listing_host_id, vrbo_revs$single_listing_host_id)),
  Quarter = c(d$Quarter, vrbo_revs$Quarter),
  rating = as.numeric(c(d$rating, vrbo_revs$rating)),
  date = as.numeric(c(d$date, vrbo_revs$date)),
  platform = c(rep("Airbnb", times = nrow(d)), rep("Vrbo", times = nrow(vrbo_revs))),
  superhost = c(d$superhost, vrbo_revs$superhost),
  idxpid = c(d$idxpid, vrbo_revs$idxpid),
  reason = c(d$reason, vrbo_revs$reason),
  group = c(d$group, vrbo_revs$group),
  did_group = c(d$did_group, vrbo_revs$did_group),
  did_group_first = c(d$did_group_first, vrbo_revs$did_group_first),
  first_sh = c(d$first_sh, vrbo_revs$first_sh),
  first_nsh = c(d$first_nsh, vrbo_revs$first_nsh),
  exp_group = c(d$exp_group, vrbo_revs$exp_group),
  exp_group_first = c(d$exp_group_first, vrbo_revs$exp_group_first),
  price.win = c(d$price.win, vrbo_revs$price.win),
  host_listings_count = c(d$host_listings_count, vrbo_revs$host_listings_count),
  host_response_rate = c(d$host_response_rate, vrbo_revs$host_response_rate)
) |>
  mutate(bnbVrbo = ifelse(platform == 'Airbnb', 0, 1),
         id.Quarter = paste(id, Quarter, sep = '.'),
         id.platform = paste(id, platform, sep = "."),
         Quarter.platform = paste(Quarter, platform, sep = "."),
         id.Quarter.platform = paste(id, Quarter, platform, sep = ".")) |>
  filter(!is.na(idxpid) & !is.na(did_group)) |>
  as.data.table()

# Calculate number of reviews in a Q for a host
dl <- dl |>
  group_by(id, Quarter) |>
  mutate(ratings_LQ = n()) |>
  ungroup()

n_matches <- format(length(unique(dl$idxpid)), big.mark = ',')
bnb_ratings <- format(nrow(dl[dl$platform == "Airbnb",]), big.mark = ',')
vrbo_ratings <- format(nrow(dl[dl$platform == "Vrbo",]), big.mark = ',')

d$matched <- ifelse(d$id %in% match_dt$id, "Matched", "Unmatched")

matched.summary_all <- d[!is.na(d$matched),] |>
  filter(did_group_first != "" & did_group_first != "Both") |>
  mutate(did_group = "All") |>
  group_by(id) |>
  mutate(ratings = n()) |>
  ungroup() |>
  group_by(did_group, matched) |>
  summarise(Ratings = format(n(),big.mark = ','),
            `Proportion as Superhost` = paste(sprintf("%.2f",100*round(mean(superhost, na.rm = T),4)), "%", sep = ''),
            `Unique Listings` = format(length(unique(id)),big.mark = ','),
            `Unique Hosts` = format(length(unique(host_id)),big.mark = ','),
            `Single-Listing Hosts` = format(length(unique(single_listing_host_id)),big.mark = ','),
            `Rating` = paste(sprintf("%.2f", round(mean(rating, na.rm = T),2)), sep = ''),
            `(SD Rating)` = paste(" (", sprintf("%.2f", round(sd(rating, na.rm = T),2)), ")", sep = ''),
            `Accommodates` = paste(sprintf("%.2f",round(mean(accommodates, na.rm = T),2)), sep = ''),
            `(SD Acc)` = paste(" (", sprintf("%.2f",round(sd(accommodates, na.rm = T),2)), ")", sep = ''),
            `Price` = paste(sprintf("%.2f",round(mean(price, na.rm = T),2)),  sep = ''),
            `(SD Price)` = paste(" (", sprintf("%.2f",round(sd(price, na.rm = T),2)), ")", sep = ''),
            `Response Rate` = paste(sprintf("%.2f",round(mean(host_response_rate, na.rm = T),2)), sep = ''),
            `(SD Response)` = paste(" (", sprintf("%.2f",round(sd(host_response_rate, na.rm = T),2)), ")", sep = ''),
            `Amenities Listed` = paste(sprintf("%.2f",round(mean(Amenities, na.rm = T),2)), sep = ''),
            `(SD Amenities)` = paste(" (", sprintf("%.2f",round(sd(Amenities, na.rm = T),2)), ")", sep = ''),) |>
  as.data.table()

matched.summary_group <- d[!is.na(d$matched),] |>
  filter(matched == "Matched" & did_group_first != "" & did_group_first != "Both") |>
  mutate(did_group = factor(did_group_first, levels = c("Always", "Lose", "Gain", "Never"))) |>
  group_by(id) |>
  mutate(ratings = n()) |>
  ungroup() |>
  group_by(did_group) |>
  summarise(Ratings = format(n(),big.mark = ','),
            `Proportion as Superhost` = paste(sprintf("%.2f",100*round(mean(superhost, na.rm = T),4)), "%", sep = ''),
            `Unique Listings` = format(length(unique(id)),big.mark = ','),
            `Unique Hosts` = format(length(unique(host_id)),big.mark = ','),
            `Single-Listing Hosts` = format(length(unique(single_listing_host_id)),big.mark = ','),
            `Rating` = paste(sprintf("%.2f", round(mean(rating, na.rm = T),2)), sep = ''),
            `(SD Rating)` = paste(" (", sprintf("%.2f", round(sd(rating, na.rm = T),2)), ")", sep = ''),
            `Accommodates` = paste(sprintf("%.2f",round(mean(accommodates, na.rm = T),2)), sep = ''),
            `(SD Acc)` = paste(" (", sprintf("%.2f",round(sd(accommodates, na.rm = T),2)), ")", sep = ''),
            `Price` = paste(sprintf("%.2f",round(mean(price, na.rm = T),2)),  sep = ''),
            `(SD Price)` = paste(" (", sprintf("%.2f",round(sd(price, na.rm = T),2)), ")", sep = ''),
            `Response Rate` = paste(sprintf("%.2f",round(mean(host_response_rate, na.rm = T),2)), sep = ''),
            `(SD Response)` = paste(" (", sprintf("%.2f",round(sd(host_response_rate, na.rm = T),2)), ")", sep = ''),
            `Amenities Listed` = paste(sprintf("%.2f",round(mean(Amenities, na.rm = T),2)), sep = ''),
            `(SD Amenities)` = paste(" (", sprintf("%.2f",round(sd(Amenities, na.rm = T),2)), ")", sep = ''),) |>
  as.data.table()


#####
## CODE TO MAKE FIGURE 1
#| label: fig-mf1
#| fig-cap: "Monthly Average Ratings for Airbnb Listings."
# Model Free Evidence
# To make this, we need to stack together all of the times where SH status flips
exp_d_2 <- d |>
  filter(exp_group_first == "G2" |
           exp_group_first == "L2") |>
  mutate(experiment = 2,
         t = Quarter - 2,
         time = date - 2)

exp_d_3 <- d |>
  filter(exp_group_first == "G3" |
           exp_group_first == "L3") |>
  mutate(experiment = 3,
         t = Quarter - 3,
         time = date - 5)

exp_d_4 <- d |>
  filter(exp_group_first == "G4" |
           exp_group_first == "L4") |>
  mutate(experiment = 4,
         t = Quarter - 4,
         time = date - 8)

exp_d_5 <- d |>
  filter(exp_group_first == "G5" |
           exp_group_first == "L5") |>
  mutate(experiment = 5,
         t = Quarter - 5,
         time = date - 11)

exp_d_6 <- d |>
  filter(exp_group_first == "G6" |
           exp_group_first == "L6") |>
  mutate(experiment = 6,
         t = Quarter - 6,
         time = date - 14)

stacked_dif <- rbind(exp_d_2, exp_d_3, exp_d_4, exp_d_5, exp_d_6) |>
  mutate(listing_exp = paste(id, experiment, sep = "_"))

stacked_dif$facet <- ifelse(stacked_dif$did_group_first == "Lose" | stacked_dif$did_group_first == "Always", 
                            "Lose Status", "Gain Status")

mf1 <- stacked_dif |>
  #filter(abs(time) <= 10) |>
  mutate(tg = t >= 0) |>
  mutate(time = date) |>
  mutate(Group = did_group_first) |>
  group_by(Group, time, facet, experiment, tg) |>
  summarise(avg = mean(rating, na.rm = TRUE),
            ub = avg + 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n())),
            lb = avg - 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n()))) |>
  ggplot(aes(x = time, y = avg, color = Group, group = tg)) +
  #geom_vline(xintercept = -1, linetype = 'dotted') +
  geom_line(linewidth = .75) +
  geom_point(size = .8) +
  geom_line(aes(x = time, y = ub), linewidth = .35, alpha = 1, linetype = "dashed") +
  geom_line(aes(x = time, y = lb), linewidth = .35, alpha = 1, linetype = "dashed") +
  theme_bw() +
  facet_grid(experiment ~ facet) +
  scale_color_manual(values = c( "black", "black")) +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(4.59,5)) +
  labs(
    x = "Month",
    y = "Mean Rating"
  ) +
  theme(
    axis.title = element_text(size = 16),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 18)   # Increase facet title size
  )
mf1

### Code used in Web Appendix D
# Calculate SD before change
pre_sd <- stacked_dif |>
  filter(t < 0) |>
  group_by(id, date, did_group_first) |>
  summarise(rating = mean(rating, na.rm = T)) |>
  ungroup() |>
  group_by(id, did_group_first) |>
  summarise(sd_rating = sd(rating, na.rm = T), n_months = n()) |>
  na.omit()

# Keep only the flattest 75%
stacked_dif$keep <- ifelse(stacked_dif$id %in% pre_sd[pre_sd$sd_rating >= 
                                                        quantile(pre_sd[pre_sd$did_group_first == "Gain",]$sd_rating, na.rm = T)[[4]],]$id &
                             stacked_dif$did_group_first == "Gain", 0, 
                           ifelse(stacked_dif$id %in% pre_sd[pre_sd$sd_rating >= 
                                                               quantile(pre_sd[pre_sd$did_group_first == "Lose",]$sd_rating, na.rm = T)[[4]],]$id &
                                    stacked_dif$did_group_first == "Lose", 0, 1))
mf1_75 <- stacked_dif |>
  filter(keep == 1) |>
  mutate(tg = t >= 0) |>
  mutate(time = date) |>
  mutate(Group = did_group_first) |>
  group_by(Group, time, facet, experiment, tg) |>
  summarise(avg = mean(rating, na.rm = TRUE),
            ub = avg + 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n())),
            lb = avg - 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n()))) |>
  ggplot(aes(x = time, y = avg, color = Group, group = tg)) +
  #geom_vline(xintercept = -1, linetype = 'dotted') +
  geom_line(linewidth = .75) +
  geom_point(size = .8) +
  geom_line(aes(x = time, y = ub), linewidth = .35, alpha = 1, linetype = "dashed") +
  geom_line(aes(x = time, y = lb), linewidth = .35, alpha = 1, linetype = "dashed") +
  theme_bw() +
  facet_grid(experiment ~ facet) +
  scale_color_manual(values = c( "black", "black")) +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(4.59,5)) +
  labs(
    x = "Month",
    y = "Mean Rating"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

# Flattest 50%
stacked_dif$keep <- ifelse(stacked_dif$id %in% pre_sd[pre_sd$sd_rating >= 
                                                        quantile(pre_sd[pre_sd$did_group_first == "Gain",]$sd_rating, na.rm = T)[[3]],]$id &
                             stacked_dif$did_group_first == "Gain", 0, 
                           ifelse(stacked_dif$id %in% pre_sd[pre_sd$sd_rating >= 
                                                               quantile(pre_sd[pre_sd$did_group_first == "Lose",]$sd_rating, na.rm = T)[[3]],]$id &
                                    stacked_dif$did_group_first == "Lose", 0, 1))
mf1_50 <- stacked_dif |>
  filter(keep == 1) |>
  mutate(tg = t >= 0) |>
  mutate(time = date) |>
  mutate(Group = did_group_first) |>
  group_by(Group, time, facet, experiment, tg) |>
  summarise(avg = mean(rating, na.rm = TRUE),
            ub = avg + 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n())),
            lb = avg - 1.96 * (sd(rating, na.rm = TRUE) / sqrt(n()))) |>
  ggplot(aes(x = time, y = avg, color = Group, group = tg)) +
  #geom_vline(xintercept = -1, linetype = 'dotted') +
  geom_line(linewidth = .75) +
  geom_point(size = .8) +
  geom_line(aes(x = time, y = ub), linewidth = .35, alpha = 1, linetype = "dashed") +
  geom_line(aes(x = time, y = lb), linewidth = .35, alpha = 1, linetype = "dashed") +
  theme_bw() +
  facet_grid(experiment ~ facet) +
  scale_color_manual(values = c( "black", "black")) +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(4.59,5)) +
  labs(
    x = "Month",
    y = "Mean Rating"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

#####
## BNB Difference-in-Differences -- THIS CODE MAKES PRETREND PLOTS (FIGURE 2) AND ESTIMATE MODELS
#| label: fig-predidplot
#| fig-cap: "AVERAGE TREATMENT EFFECTS OF SUPERHOST STATUS ACROSS TIME PERIODS"

# THERE ARE FOUR STEPS TO ESTIMATING THESE MODELS
### 1. Prepare the gain and lose data
### 2. Estimate models and save
### 3. Create plots
### 4. Create summary table

# 1. Prepare the gain and lose data
##GAIN
gain_did <- d[d$did_group_first == "Gain" | d$did_group_first == "Never",]
gain_did$G <- as.numeric(ifelse(gain_did$did_group_first == "Never", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(gain_did$id)

##LOSE
lose_did <- d[d$did_group_first == "Lose" | d$did_group_first == "Always",]
lose_did$G <- as.numeric(ifelse(lose_did$did_group_first == "Always", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_btw_did <- combine_did_summary_dynamic(yname = "rating",
                                           tname = "Quarter",
                                           idname = "ID",
                                           clustervars = "ID",
                                           gname = "G",
                                           data_names = c("Gain", "Lose"),
                                           data_list = list(gain_did, lose_did),
                                           xformla = list(~price.win + host_listings_count + ratings_LQ),
                                           allow_unbalanced_panel = T
)

# 3. Plot
predidgain_btw <- bnb_btw_did[[2]][[1]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

### Including controls
predidgain_btw_controls <- bnb_btw_did[[2]][[3]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status -- With Controls"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )


## LOSE
predidlose_btw <- bnb_btw_did[[2]][[2]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

### Including controls
predidlose_btw_controls <- bnb_btw_did[[2]][[4]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status -- With Controls"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

ab_plt <- cowplot::plot_grid(predidgain_btw, 
                             predidgain_btw_controls,
                             align = 'v', 
                             labels = c("A.", "B."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))
cd_plt <- cowplot::plot_grid(predidlose_btw, 
                             predidlose_btw_controls,
                             align = 'v', 
                             labels = c("C.", "D."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))

cowplot::plot_grid(ab_plt, cd_plt,
                   ncol=1,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1))


#####
## VRBO Difference-in-Differences -- THIS CODE MAKES PRETREND PLOTS (FIGURE 3) AND ESTIMATE MODELS
# THERE ARE FOUR STEPS TO ESTIMATING THESE MODELS
### 1. Prepare the gain and lose data
### 2. Estimate models and save
### 3. Create plots
### 4. Create summary table

# 1. Prepare the gain and lose data
## GAIN
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

## LOSE
lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

# 3. Plot
predidgain_vrbo <- bnb_vrbo_did[[2]][[1]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

### Including controls
predidgain_vrbo_controls <- bnb_vrbo_did[[2]][[3]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status -- With Controls"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )


## LOSE
predidlose_vrbo <- bnb_vrbo_did[[2]][[2]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

### Including controls
predidlose_vrbo_controls <- bnb_vrbo_did[[2]][[4]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status -- With Controls"
  ) +
  theme(
    plot.subtitle = element_text(size = 18),
    axis.title = element_text(size = 14),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

ab_plt <- cowplot::plot_grid(predidgain_vrbo, 
                             predidgain_vrbo_controls,
                             align = 'v', 
                             labels = c("A.", "B."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))
cd_plt <- cowplot::plot_grid(predidlose_vrbo, 
                             predidlose_vrbo_controls,
                             align = 'v', 
                             labels = c("C.", "D."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))

cowplot::plot_grid(ab_plt, cd_plt,
                   ncol=1,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1))

##### 
# SUMMARY FOR STRATEGY 1
bnb_btw_did[[1]][c(1,3,2,4),] |>
  mutate(Change = c("Gain", "Gain", "Lose", "Lose"),
         Comparison = c("Never","Never","Always","Always"),
         Controls = c("No", "Yes","No", "Yes"),
         ATT = round(att,3),
         SE = round(se,3),
         `Lower-Bound` = round(lb,3),
         `Upper-Bound` = round(ub,3),
         `Listing FE` = c("Yes","Yes","Yes","Yes"),
         `Time FE` = c("Yes","Yes","Yes","Yes"),
         Observations = format(obs, big.mark = ','),
         `Mean DV` = round(mdv,3),
         `Pre-Trend p-val` = as.character(round(ptpv,3))
  ) |>
  t() |>
  tail(12) |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = c(1,2,3,4))

#####
# SUMMARY FOR STRATEGY 2
m.idfe <- felm(data = d, rating ~ superhost | id | 0 |  id )
m.idrfe <- felm(data = d, rating ~ superhost | id + reviewer_id | 0 |  id )
m.idqfe <- felm(data = d, rating ~ superhost | id + Quarter | 0 |  id )
m.fe <- felm(data = d, rating ~ superhost | id + reviewer_id + Quarter | 0 |  id )
m.fe.r <- felm(data = d, rating ~ superhost + log(ratings_LQ) | id + reviewer_id + Quarter | 0 |  id )

m.ratings <- felm(data = listings, ratings_LQ ~ superhost | id + Quarter | 0 | id )

data.frame(
  `Superhost Coefficient` = c(
    paste(round(m.idfe$coefficients["superhost", 1], 3), "***", sep = ""),
    paste(round(m.idrfe$coefficients["superhost", 1], 3), "***", sep = ""),
    paste(round(m.idqfe$coefficients["superhost", 1], 3), "***", sep = ""),
    paste(round(m.fe$coefficients["superhost", 1], 3), "***", sep = ""),
    paste(round(m.fe.r$coefficients["superhost", 1], 3), "***", sep = "")),
  se1 = c(
    paste("(",round(summary(m.idfe)$coefficients["superhost", 2], 3), ")", sep = ""),
    paste("(",round(summary(m.idrfe)$coefficients["superhost", 2], 3), ")", sep = ""),
    paste("(",round(summary(m.idqfe)$coefficients["superhost", 2], 3), ")", sep = ""),
    paste("(",round(summary(m.fe)$coefficients["superhost", 2], 3), ")", sep = ""),
    paste("(",round(summary(m.fe.r)$coefficients["superhost", 2], 3), ")", sep = "")),
  `N Ratings` = c(
    "","","","",
    paste(round(m.fe.r$coefficients["log(ratings_LQ)", 1], 4), "*", sep = "")),
  `se3` = c(
    "","","","",
    paste("(<.001", ")", sep = "")),
  `Listing FE` = c("Yes","Yes","Yes","Yes","Yes"),
  `Time FE` = c("No","No","Yes","Yes","Yes"),
  `Reviewer FE` = c("No","Yes", "No","Yes","Yes"),
  Observations = c(format(summary(m.idfe)$N, big.mark = ','),
                   format(summary(m.idrfe)$N, big.mark = ','),
                   format(summary(m.idqfe)$N, big.mark = ','),
                   format(summary(m.fe)$N, big.mark = ','),
                   format(summary(m.fe.r)$N, big.mark = ',')),
  `R.Squared` = c(
    round(summary(m.idfe)$r2, 3),
    round(summary(m.idrfe)$r2, 3),
    round(summary(m.idqfe)$r2, 3),
    round(summary(m.fe)$r2, 3),
    round(summary(m.fe.r)$r2, 3)),
  `Adj.R.Squared` = c(
    round(summary(m.idfe)$r2adj, 3),
    round(summary(m.idrfe)$r2adj, 3),
    round(summary(m.idqfe)$r2adj, 3),
    round(summary(m.fe)$r2adj, 3),
    round(summary(m.fe.r)$r2adj, 3)),
  `Residual Std. Error` = c(
    round(summary(m.idfe)$rse, 3),
    round(summary(m.idrfe)$rse, 3),
    round(summary(m.idqfe)$rse, 3),
    round(summary(m.fe)$rse, 3),
    round(summary(m.fe.r)$rse, 3)),
  `df` = c(
    format(summary(m.idfe)$df[[1]], big.mark = ","),
    format(summary(m.idrfe)$df[[1]], big.mark = ","),
    format(summary(m.idqfe)$df[[1]], big.mark = ","),
    format(summary(m.fe)$df[[1]], big.mark = ","),
    format(summary(m.fe.r)$df[[1]], big.mark = ","))
) |>
  t() |>
  as.data.frame() |>
  kableExtra::kable(align = c('c','c','c','c','c'), booktabs = T)

# For robustness to six quarters
n_quarters <- d |>
  filter(group == 'Sometimes' & !is.na(superhost)) |>
  group_by(id, Quarter) |>
  summarise(rating = mean(rating)) |>
  group_by(id) |>
  summarise(n_quarters = n())

six_qs_mod <- summary(felm(data = d[d$id %in% n_quarters[n_quarters$n_quarters == 6,]$id,], rating ~ superhost | id + Quarter | 0 |  id ))
six_qs_mod_gain <- summary(felm(data = d[d$id %in% n_quarters[n_quarters$n_quarters == 6,]$id &
                                           d$did_group == "Gain",], rating ~ superhost | id + Quarter | 0 |  id ))
six_qs_mod_lose <- summary(felm(data = d[d$id %in% n_quarters[n_quarters$n_quarters == 6,]$id &
                                           d$did_group == "Lose",], rating ~ superhost | id + Quarter | 0 |  id ))

quarters <- d |>
  filter(id %in% n_quarters[n_quarters$n_quarters == 6,]$id) |>
  group_by(id) |>
  mutate(avg = mean(rating)) |>
  ungroup() |>
  group_by(id, Quarter, superhost, did_group, avg) |>
  summarise(avg_LQ = mean(rating)) |>
  mutate(above_avg = avg_LQ - avg,
         belowAbove = ifelse(above_avg < 0, -1,
                             ifelse(above_avg == 0, 0, 1)))

#This comes from the R script with the same name
within_cohensd <- fread("Within Listing Cohen's d/within_cohensd.csv")[[1]]

# Models mentioned in text
m.nofe <- summary(lfe::felm(data = d, rating ~ superhost | 0 | 0 | id))
m.gain <- summary(felm(data = d[d$did_group == "Gain",], rating ~ superhost  | id + Quarter | 0 |  id ))
m.lose <- summary(felm(data = d[d$did_group == "Lose",], rating ~ superhost  | id + Quarter | 0 |  id ))
m.both <- summary(felm(data = d[d$did_group == "Both",], rating ~ superhost  | id + Quarter | 0 |  id ))
m.entire <- summary(felm(data = d, rating ~ superhost * entire_home | id + Quarter | 0 |  id ))
m.single <- summary(felm(data = d, rating ~ superhost * is.na(single_listing_host_id) | id + Quarter | 0 |  id ))
m.price <- summary(felm(data = d, rating ~ superhost * I(log(price)) | id + Quarter | 0 |  id ))
m.pricedv <- summary(felm(data = d, price ~ superhost | id + Quarter | 0 |  id ))
m.amenities <- summary(felm(data = d, rating ~ superhost * Amenities | id + Quarter | 0 |  id ))
m.accommodates <- summary(felm(data = d, rating ~ superhost * accommodates | id + Quarter | 0 |  id ))

#####
# SUMMARY FOR STRATEGY 3
bnb_vrbo_did[[1]][c(1,3,2,4),] |>
  mutate(Change = c("Gain", "Gain", "Lose", "Lose"),
         Comparison = c("Vrbo","Vrbo","Vrbo","Vrbo"),
         Controls = c("No", "Yes","No", "Yes"),
         ATT = round(att,3),
         SE = round(se,3),
         `Lower-Bound` = round(lb,3),
         `Upper-Bound` = round(ub,3),
         `Listing FE` = c("Yes","Yes","Yes","Yes"),
         `Time FE` = c("Yes","Yes","Yes","Yes"),
         Observations = format(obs, big.mark = ','),
         `Mean DV` = round(mdv,3),
         `Pre-Trend p-val` = round(ptpv,3)
  ) |>
  t() |>
  tail(12) |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = c(1,2,3,4))

#####
# Web Appendix B
wab <- fread("Listings_Total.csv", select = c('last_scraped', 'Quarter'))

ggplot(wab, aes(x = last_scraped), color = 'black') +
  geom_histogram(bins = 100) +
  geom_hline(yintercept = 0) +
  geom_vline(xintercept = as.POSIXct('2021-10-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2022-01-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2022-04-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2022-07-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2022-10-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2023-01-05'), linetype = 'dashed') +
  geom_vline(xintercept = as.POSIXct('2023-04-05'), linetype = 'dashed') +
  xlab("Collection Date") +
  ylab("Number of Observations") +
  theme( legend.position = "none") + 
  theme_bw() +
  theme(plot.title = element_text( face = "bold", size = 18)) + 
  theme(axis.title.x = element_text(face = "bold", size = 18)) +
  theme(axis.title.y = element_text(face = "bold", size = 18)) +
  theme(axis.text.x = element_text( size = 14)) + 
  theme(axis.text.y = element_text(size = 14))

#####
# Web Appendix C
rowZ <- nrow(listings[!is.na(listings$will_gain) &
                        !is.na(listings$RR_LY) &
                        !is.na(listings$avg_LY) &
                        !is.na(listings$ratings_LY),])

willgain <- listings[!is.na(listings$will_gain) &
                       !is.na(listings$RR_LY) &
                       !is.na(listings$avg_LY) &
                       !is.na(listings$ratings_LY),] |>
  mutate(Sample = "All Hosts", Status = ifelse(will_gain == 0, "Remain Non-SH", "Gain SH")) |>
  group_by(Sample, Status) |>
  summarise(Proportion = paste(round(n()/rowZ, 4)*100, "%", sep = ""),
            `M Rating (Prior Year)` = round(mean(avg_LY, na.rm = T),2),
            `% > 4.8` = paste(round(mean(avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `N Ratings (Prior Year)` = round(mean(ratings_LY, na.rm = T),2),
            `% > 10` = paste(round(mean(ratings_LY > 10, na.rm = T),4)*100, "%", sep = ""),
            `Response Rate (Prior Year)` = round(mean(RR_LY, na.rm = T),2),
            `% > 90%` = paste(round(mean(RR_LY > 90, na.rm = T),4)*100, "%", sep = ""),
            `% > All Criteria` = paste(round(mean(RR_LY > 90 & ratings_LY > 10 & avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `% > Any Criteria` = paste(round(mean(RR_LY > 90 | ratings_LY > 10 | avg_LY > 4.8, na.rm = T),4)*100, "%", sep = "")) |>
  t() |>
  as.data.frame()

single_listing <- listings |> 
  group_by(host_id) |> 
  mutate(n_listings = length(unique(id))) |> 
  ungroup() |> 
  filter(n_listings == 1)

rowZ <- nrow(single_listing[!is.na(single_listing$will_gain) &
                              !is.na(single_listing$RR_LY) &
                              !is.na(single_listing$avg_LY) &
                              !is.na(single_listing$ratings_LY),])

sl_willgain <- single_listing[!is.na(single_listing$will_gain) &
                                !is.na(single_listing$RR_LY) &
                                !is.na(single_listing$avg_LY) &
                                !is.na(single_listing$ratings_LY),] |>
  mutate(Sample = "Single-Listing Hosts", Status = ifelse(will_gain == 0, "Remain Non-SH", "Gain SH")) |>
  group_by(Sample, Status) |>
  summarise(Proportion = paste(round(n()/rowZ, 4)*100, "%", sep = ""),
            `M Rating (Prior Year)` = round(mean(avg_LY, na.rm = T),2),
            `% > 4.8` = paste(round(mean(avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `N Ratings (Prior Year)` = round(mean(ratings_LY, na.rm = T),2),
            `% > 10` = paste(round(mean(ratings_LY > 10, na.rm = T),4)*100, "%", sep = ""),
            `Response Rate (Prior Year)` = round(mean(RR_LY, na.rm = T),2),
            `% > 90%` = paste(round(mean(RR_LY > 90, na.rm = T),4)*100, "%", sep = ""),
            `% > All Criteria` = paste(round(mean(RR_LY > 90 & ratings_LY > 10 & avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `% > Any Criteria` = paste(round(mean(RR_LY > 90 | ratings_LY > 10 | avg_LY > 4.8, na.rm = T),4)*100, "%", sep = "")) |>
  t() |>
  as.data.frame()

cbind(willgain, sl_willgain) |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = NULL) 

# lose status
rowZ <- nrow(listings[!is.na(listings$will_lose) &
                        !is.na(listings$RR_LY) &
                        !is.na(listings$avg_LY) &
                        !is.na(listings$ratings_LY),])

willlose <- listings[!is.na(listings$will_lose) &
                       !is.na(listings$RR_LY) &
                       !is.na(listings$avg_LY) &
                       !is.na(listings$ratings_LY),] |>
  mutate(Sample = "All Hosts", Status = ifelse(will_lose==0, "Remain SH", "Lose SH")) |>
  group_by(Sample, Status) |>
  summarise(Proportion = paste(round(n()/rowZ, 4)*100, "%", sep = ""),
            `M Rating (Prior Year)` = round(mean(avg_LY, na.rm = T),2),
            `% > 4.8` = paste(round(mean(avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `N Ratings (Prior Year)` = round(mean(ratings_LY, na.rm = T),2),
            `% > 10` = paste(round(mean(ratings_LY > 10, na.rm = T),4)*100, "%", sep = ""),
            `Response Rate (Prior Year)` = round(mean(RR_LY, na.rm = T),2),
            `% > 90%` = paste(round(mean(RR_LY > 90, na.rm = T),4)*100, "%", sep = ""),
            `% > All Criteria` = paste(round(mean(RR_LY > 90 & ratings_LY > 10 & avg_LY > 4.8, na.rm = T),4)*100, "%", sep = "")) |>
  t() |>
  as.data.frame()

single_listing <- listings |> 
  group_by(host_id) |> 
  mutate(n_listings = length(unique(id))) |> 
  ungroup() |> 
  filter(n_listings == 1)

rowZ <- nrow(single_listing[!is.na(single_listing$will_lose) &
                              !is.na(single_listing$RR_LY) &
                              !is.na(single_listing$avg_LY) &
                              !is.na(single_listing$ratings_LY),])

sl_willlose <- single_listing[!is.na(single_listing$will_lose) &
                                !is.na(single_listing$RR_LY) &
                                !is.na(single_listing$avg_LY) &
                                !is.na(single_listing$ratings_LY),] |>
  mutate(Sample = "Single-Listing Hosts", Status = ifelse(will_lose==0, "Remain SH", "Lose SH")) |>
  group_by(Sample, Status) |>
  summarise(Proportion = paste(round(n()/rowZ, 4)*100, "%", sep = ""),
            `M Rating (Prior Year)` = round(mean(avg_LY, na.rm = T),2),
            `% > 4.8` = paste(round(mean(avg_LY > 4.8, na.rm = T),4)*100, "%", sep = ""),
            `N Ratings (Prior Year)` = round(mean(ratings_LY, na.rm = T),2),
            `% > 10` = paste(round(mean(ratings_LY > 10, na.rm = T),4)*100, "%", sep = ""),
            `Response Rate (Prior Year)` = round(mean(RR_LY, na.rm = T),2),
            `% > 90%` = paste(round(mean(RR_LY > 90, na.rm = T),4)*100, "%", sep = ""),
            `% > All Criteria` = paste(round(mean(RR_LY > 90 & ratings_LY > 10 & avg_LY > 4.8, na.rm = T),4)*100, "%", sep = "")) |>
  t() |>
  as.data.frame()


cbind(willlose, sl_willlose) |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = NULL) 

# predicting changes in status
set.seed(123)
listings_gain <- listings[!is.na(listings$will_gain),]
indices <- sample(1:nrow(listings_gain), size = .7 * nrow(listings_gain))
gain_train <- listings_gain[indices,]
gain_test <- listings_gain[-indices,]

# Create Models
glm1 <- glm(data = gain_train,
            will_gain ~ avg_LY + RR_LY + ratings_LY, family = 'binomial')
# OVER THRESHOLDS
glm2 <- glm(data = gain_train,
            will_gain ~ I(avg_LY >= 4.8) + I(RR_LY >= 90) + I(ratings_LY >= 10), family = 'binomial')
# interactions
glm3 <- glm(data = gain_train,
            will_gain ~ I(avg_LY >= 4.8) * I(RR_LY >= 90) * I(ratings_LY >= 10), family = 'binomial')

glm4 <- glm(data = gain_train,
            will_gain ~ I(avg_LY >= 4.8) * I(RR_LY >= 90) * I(ratings_LY >= 10) +
              avg_LY + RR_LY + ratings_LY, family = 'binomial')

# Predictions:
gain_test$prob_glm_1 <- predict(glm1, newdata = gain_test, type = 'response')
gain_test$prob_glm_2 <- predict(glm2, newdata = gain_test, type = 'response')
gain_test$prob_glm_3 <- predict(glm3, newdata = gain_test, type = 'response')
gain_test$prob_glm_4 <- predict(glm4, newdata = gain_test, type = 'response')
gain_test$guess <- sample(c(0,1), size = nrow(gain_test), prob = c(.856, .144), replace = T)

m1_hist <- gain_test |>
  ggplot(aes(x = prob_glm_1)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 1")

m2_hist <- gain_test |>
  ggplot(aes(x = prob_glm_2)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 2")

m3_hist <- gain_test |>
  ggplot(aes(x = prob_glm_3)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 3")

m4_hist <- gain_test |>
  ggplot(aes(x = prob_glm_4)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 4")

cowplot::plot_grid(m1_hist, m2_hist, m3_hist, m4_hist, ncol = 2)

# lose
set.seed(123)
listings_lose <- listings[!is.na(listings$will_lose),]
indices <- sample(1:nrow(listings_lose), size = .7 * nrow(listings_lose))
lose_train <- listings_lose[indices,]
lose_test <- listings_lose[-indices,]

# Create Models
glm1 <- glm(data = lose_train,
            will_lose ~ avg_LY + RR_LY + ratings_LY, family = 'binomial')
# OVER THRESHOLDS
glm2 <- glm(data = lose_train,
            will_lose ~ I(avg_LY >= 4.8) + I(RR_LY >= 90) + I(ratings_LY >= 10), family = 'binomial')
# interactions
glm3 <- glm(data = lose_train,
            will_lose ~ I(avg_LY >= 4.8) * I(RR_LY >= 90) * I(ratings_LY >= 10), family = 'binomial')

glm4 <- glm(data = lose_train,
            will_lose ~ I(avg_LY >= 4.8) * I(RR_LY >= 90) * I(ratings_LY >= 10) +
              avg_LY + RR_LY + ratings_LY, family = 'binomial')

# Predictions:
lose_test$prob_glm_1 <- predict(glm1, newdata = lose_test, type = 'response')
lose_test$prob_glm_2 <- predict(glm2, newdata = lose_test, type = 'response')
lose_test$prob_glm_3 <- predict(glm3, newdata = lose_test, type = 'response')
lose_test$prob_glm_4 <- predict(glm4, newdata = lose_test, type = 'response')
lose_test$guess <- sample(c(0,1), size = nrow(lose_test), prob = c(.9344, .0656), replace = T)

m1_hist <- lose_test |>
  ggplot(aes(x = prob_glm_1)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 1")

m2_hist <- lose_test |>
  ggplot(aes(x = prob_glm_2)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 2")

m3_hist <- lose_test |>
  ggplot(aes(x = prob_glm_3)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 3")

m4_hist <- lose_test |>
  ggplot(aes(x = prob_glm_4)) +
  geom_histogram(bins = 20) +
  theme_bw() +
  coord_cartesian(xlim = c(0,1)) +
  labs(x = "Probability",
       y = "Count",
       subtitle = "Model 4")

cowplot::plot_grid(m1_hist, m2_hist, m3_hist, m4_hist, ncol = 2)

# Results of above
gain_test |>
  filter(!is.na(prob_glm_1)) |>
  mutate(ACTUAL = ifelse(will_gain == 1, "Gain", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_1 >= .144, "Gain", "Remain")) |>
  summarise(Gain = paste(format(sum(ACTUAL == "Gain"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Gain")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = ""))

gain_test |>
  filter(!is.na(prob_glm_2)) |>
  mutate(ACTUAL = ifelse(will_gain == 1, "Gain", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_2 >= .144, "Gain", "Remain")) |>
  summarise(Gain = paste(format(sum(ACTUAL == "Gain"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Gain")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

gain_test |>
  filter(!is.na(prob_glm_3)) |>
  mutate(ACTUAL = ifelse(will_gain == 1, "Gain", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_3 >= .144, "Gain", "Remain")) |>
  summarise(Gain = paste(format(sum(ACTUAL == "Gain"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Gain")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

gain_test |>
  filter(!is.na(prob_glm_4)) |>
  mutate(ACTUAL = ifelse(will_gain == 1, "Gain", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_4 >= .144, "Gain", "Remain")) |>
  summarise(Gain = paste(format(sum(ACTUAL == "Gain"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Gain")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

gain_test |>
  mutate(ACTUAL = ifelse(will_gain == 1, "Gain", "Remain")) |>
  group_by(` ` = ifelse(guess >= .144, "Gain", "Remain")) |>
  summarise(Gain = paste(format(sum(ACTUAL == "Gain"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Gain")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 
lose_test |>
  filter(!is.na(prob_glm_1)) |>
  mutate(ACTUAL = ifelse(will_lose == 1, "Lose", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_1 >= .064, "Lose", "Remain")) |>
  summarise(Lose = paste(format(sum(ACTUAL == "Lose"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Lose")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = ""))

lose_test |>
  filter(!is.na(prob_glm_2)) |>
  mutate(ACTUAL = ifelse(will_lose == 1, "Lose", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_2 >= .064, "Lose", "Remain")) |>
  summarise(Lose = paste(format(sum(ACTUAL == "Lose"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Lose")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

lose_test |>
  filter(!is.na(prob_glm_3)) |>
  mutate(ACTUAL = ifelse(will_lose == 1, "Lose", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_3 >= .064, "Lose", "Remain")) |>
  summarise(Lose = paste(format(sum(ACTUAL == "Lose"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Lose")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

lose_test |>
  filter(!is.na(prob_glm_4)) |>
  mutate(ACTUAL = ifelse(will_lose == 1, "Lose", "Remain")) |>
  group_by(` ` = ifelse(prob_glm_4 >= .064, "Lose", "Remain")) |>
  summarise(Lose = paste(format(sum(ACTUAL == "Lose"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Lose")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

lose_test |>
  mutate(ACTUAL = ifelse(will_lose == 1, "Lose", "Remain")) |>
  group_by(` ` = ifelse(guess >= .064, "Lose", "Remain")) |>
  summarise(Lose = paste(format(sum(ACTUAL == "Lose"),big.mark = ','),
                         " (",paste(round(sum(ACTUAL == "Lose")/n(),4)*100,"%)", sep = ""),
                         sep = ""),
            Remain = paste(format(sum(ACTUAL == "Remain"),big.mark = ','),
                           " (",paste(round(sum(ACTUAL == "Remain")/n(),4)*100,"%)", sep = ""),
                           sep = "")) 

#####
# web appendix F
# 1. Prepare the gain and lose data
##GAIN
gain_did <- d[d$did_group == "Gain" | d$did_group == "Never",]
gain_did$G <- as.numeric(ifelse(gain_did$did_group == "Never", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(gain_did$id)

##LOSE
lose_did <- d[d$did_group == "Lose" | d$did_group == "Always",]
lose_did$G <- as.numeric(ifelse(lose_did$did_group == "Always", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_btw_did <- combine_did_summary_dynamic(yname = "rating",
                                           tname = "Quarter",
                                           idname = "ID",
                                           clustervars = "ID",
                                           gname = "G",
                                           data_names = c("Gain", "Lose"),
                                           data_list = list(gain_did, lose_did),
                                           xformla = list(~price.win + host_listings_count + ratings_LQ),
                                           allow_unbalanced_panel = T
)

# 3. Plot
predidgain_btw <- bnb_btw_did[[2]][[1]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )

### Including controls
predidgain_btw_controls <- bnb_btw_did[[2]][[3]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Gaining Superhost Status -- With Controls"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )


## LOSE
predidlose_btw <- bnb_btw_did[[2]][[2]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )

### Including controls
predidlose_btw_controls <- bnb_btw_did[[2]][[4]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    subtitle = "Losing Superhost Status -- With Controls"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )

ab_plt <- cowplot::plot_grid(predidgain_btw, 
                             predidgain_btw_controls,
                             align = 'v', 
                             labels = c("A.", "B."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))
cd_plt <- cowplot::plot_grid(predidlose_btw, 
                             predidlose_btw_controls,
                             align = 'v', 
                             labels = c("C.", "D."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))

cowplot::plot_grid(ab_plt, cd_plt,
                   ncol=1,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1))

bnb_btw_did[[1]][c(1,3,2,4),] |>
  mutate(Change = c("Gain", "Gain", "Lose", "Lose"),
         Comparison = c("Never","Never","Always","Always"),
         Controls = c("No", "Yes","No", "Yes"),
         ATT = round(att,3),
         SE = round(se,3),
         `Lower-Bound` = round(lb,3),
         `Upper-Bound` = round(ub,3),
         `Listing FE` = c("Yes","Yes","Yes","Yes"),
         `Time FE` = c("Yes","Yes","Yes","Yes"),
         Observations = format(obs, big.mark = ','),
         `Mean DV` = round(mdv,3),
         `Pre-Trend p-val` = as.character(round(ptpv,3))
  ) |>
  t() |>
  tail(12) |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = c(1,2,3,4))

# VRBO MODELS

# Listings only changing once:
# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group == "Gain" & !is.na(dl$idxpid),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group == "Lose" & !is.na(dl$idxpid),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models

## GAIN
att_gain_vrbo_E <- att_gt(yname = "rating",
                          tname = "Quarter",
                          idname = "ID",
                          clustervars = "id",
                          gname = "G",
                          data = gain_did,
                          allow_unbalanced_panel = T
)
gain_vrbo_agg.es_E <- aggte(att_gain_vrbo_E, type = "dynamic")
gain_vrbo_summary_E <- aggte(att_gain_vrbo_E, type = "simple")

### Include controls
att_gain_vrbo_controls_E <- att_gt(yname = "rating",
                                   tname = "Quarter",
                                   idname = "ID",
                                   clustervars = "id",
                                   gname = "G",
                                   xformla = ~price.win + host_listings_count + ratings_LQ,
                                   data = gain_did,
                                   allow_unbalanced_panel = T,
                                   panel = T
)
gain_vrbo_controls_agg.es_E <- aggte(att_gain_vrbo_controls_E, type = "dynamic")

## LOSE
att_lose_vrbo_E <- att_gt(yname = "rating",
                          tname = "Quarter",
                          idname = "ID",
                          clustervars = "id",
                          gname = "G",
                          data = lose_did,
                          allow_unbalanced_panel = T
)
lose_vrbo_agg.es_E <- aggte(att_lose_vrbo_E, type = "dynamic")
lose_vrbo_summary_E <- aggte(att_lose_vrbo_E, type = "simple")

### Include controls
att_lose_vrbo_controls_E <- att_gt(yname = "rating",
                                   tname = "Quarter",
                                   idname = "ID",
                                   clustervars = "id",
                                   gname = "G",
                                   xformla = ~price.win + host_listings_count + ratings_LQ,
                                   data = lose_did,
                                   allow_unbalanced_panel = T,
                                   panel = T
)
lose_vrbo_controls_agg.es_E <- aggte(att_lose_vrbo_controls_E, type = "dynamic")

#3. Create plots

predidgain_vrbo_E <- data.frame(
  Quarter = gain_vrbo_agg.es_E$egt,
  Estimate = gain_vrbo_agg.es_E$att.egt,
  ub = gain_vrbo_agg.es_E$att.egt + gain_vrbo_agg.es_E$crit.val.egt * gain_vrbo_agg.es_E$se.egt,
  lb = gain_vrbo_agg.es_E$att.egt - gain_vrbo_agg.es_E$crit.val.egt * gain_vrbo_agg.es_E$se.egt
) |>
  mutate(pre = ifelse(Quarter < 0, "A", "B")) |>
  ggplot(aes(x = Quarter, y = Estimate, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    title = "Gaining Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )

predidlose_vrbo_E <- data.frame(
  Quarter = lose_vrbo_agg.es_E$egt,
  Estimate = lose_vrbo_agg.es_E$att.egt,
  ub = lose_vrbo_agg.es_E$att.egt + lose_vrbo_agg.es_E$crit.val.egt * lose_vrbo_agg.es_E$se.egt,
  lb = lose_vrbo_agg.es_E$att.egt - lose_vrbo_agg.es_E$crit.val.egt * lose_vrbo_agg.es_E$se.egt
) |>
  mutate(pre = ifelse(Quarter < 0, "A", "B")) |>
  ggplot(aes(x = Quarter, y = Estimate, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    title = "Losing Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )


predidgain_vrbo_controls_E <- data.frame(
  Quarter = gain_vrbo_controls_agg.es_E$egt,
  Estimate = gain_vrbo_controls_agg.es_E$att.egt,
  ub = gain_vrbo_controls_agg.es_E$att.egt + gain_vrbo_controls_agg.es_E$crit.val.egt * gain_vrbo_controls_agg.es_E$se.egt,
  lb = gain_vrbo_controls_agg.es_E$att.egt - gain_vrbo_controls_agg.es_E$crit.val.egt * gain_vrbo_controls_agg.es_E$se.egt
) |>
  mutate(pre = ifelse(Quarter < 0, "A", "B")) |>
  ggplot(aes(x = Quarter, y = Estimate, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    title = "Gaining Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )


predidlose_vrbo_controls_E <- data.frame(
  Quarter = lose_vrbo_controls_agg.es_E$egt,
  Estimate = lose_vrbo_controls_agg.es_E$att.egt,
  ub = lose_vrbo_controls_agg.es_E$att.egt + lose_vrbo_controls_agg.es_E$crit.val.egt * lose_vrbo_controls_agg.es_E$se.egt,
  lb = lose_vrbo_controls_agg.es_E$att.egt - lose_vrbo_controls_agg.es_E$crit.val.egt * lose_vrbo_controls_agg.es_E$se.egt
) |>
  mutate(pre = ifelse(Quarter < 0, "A", "B")) |>
  ggplot(aes(x = Quarter, y = Estimate, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  labs(
    x = "Quarter Relative to Change in Status",
    y = "Coefficient",
    title = "Losing Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text = element_text(size = 10),   # Increase axis text size
    strip.text = element_text(size = 10)   # Increase facet title size
  )


ab_plt <- cowplot::plot_grid(predidgain_vrbo_E, 
                             predidgain_vrbo_controls_E,
                             align = 'v', 
                             labels = c("A.", "B."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))
cd_plt <- cowplot::plot_grid(predidlose_vrbo_E, 
                             predidlose_vrbo_controls_E,
                             align = 'v', 
                             labels = c("C.", "D."), 
                             label_size = 20,
                             label_x = 0,
                             label_y = 1.05,
                             ncol=2,
                             rel_heights = c(1, 1),
                             rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.02, 0, 0, 0), "cm"))
cowplot::plot_grid(ab_plt, cd_plt,
                   ncol=1,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1))

#| results: asis
#| tbl-cap: "Results of Difference-in-Differences Between Airbnb and Vrbo Ratings for Gaining and Losing Superhost Status"

#4. Table
data.frame(
  Change = c("Gain", "Gain", "Lose", "Lose"),
  Comparison = c("Vrbo","Vrbo","Vrbo","Vrbo"),
  Controls = c("No", "Yes","No", "Yes"),
  ATT = c(paste(round(gain_vrbo_agg.es_E$overall.att, 3),"***", sep = ""), 
          paste(round(gain_vrbo_controls_agg.es_E$overall.att, 3),"***", sep = ""),
          paste(round(lose_vrbo_agg.es_E$overall.att, 3),"***", sep = ""),
          paste(round(lose_vrbo_controls_agg.es_E$overall.att, 3),"***", sep = "")),
  SE = c(paste(round(gain_vrbo_agg.es_E$overall.se, 3),"", sep = ""), 
         paste(round(gain_vrbo_controls_agg.es_E$overall.se, 3),"", sep = ""),
         paste(round(lose_vrbo_agg.es_E$overall.se, 3),"", sep = ""),
         paste(round(lose_vrbo_controls_agg.es_E$overall.se, 3),"", sep = "")),
  `Listing FE` = c("Yes","Yes","Yes","Yes"),
  `Time FE` = c("Yes","Yes","Yes","Yes"),
  Observations = c(format(nrow(gain_vrbo_agg.es_E$DIDparams$data), big.mark = ','),
                   format(nrow(gain_vrbo_controls_agg.es_E$DIDparams$data), big.mark = ','),
                   format(nrow(lose_vrbo_agg.es_E$DIDparams$data), big.mark = ','),
                   format(nrow(lose_vrbo_controls_agg.es_E$DIDparams$data), big.mark = ',')),
  `Mean DV` = c(round(mean(gain_vrbo_agg.es_E$DIDparams$data$rating),2),
                round(mean(gain_vrbo_controls_agg.es_E$DIDparams$data$rating),2),
                round(mean(lose_vrbo_agg.es_E$DIDparams$data$rating),2),
                round(mean(lose_vrbo_controls_agg.es_E$DIDparams$data$rating),2)),
  `Pre-Trend p-val` = c(round(att_gain_vrbo_E$Wpval,3), 
                        round(att_gain_vrbo_controls_E$Wpval,3),
                        round(att_lose_vrbo_E$Wpval,3),
                        round(att_lose_vrbo_controls_E$Wpval,3))
) |>
  t() |>
  kableExtra::kable(align = c('c','c','c','c'), booktabs = T, col.names = c(1,2,3,4))

##### 
# Web Appendix G: Specification Curve
specs <- fread("s1_specification_curve.csv")
specs$ci_width <- specs$effect.ub - specs$effect.lb
specs <- specs |>
  filter(!is.na(specs$effect.ub)) |>
  filter(ci_width <= quantile(specs$ci_width, na.rm = T, probs = .95)[[1]]) |>
  dplyr::mutate(effect.coef = as.numeric(effect.coef),
                effect.p = as.numeric(effect.p),
                effect.ub = as.numeric(effect.ub),
                effect.lb = as.numeric(effect.lb)) |>
  dplyr::arrange(-effect.coef) |>
  dplyr::mutate(h.order = 1:n()) |>
  data.table::as.data.table()

sig.colors = c('grey30', 'grey60')

curve <- ggplot(data = specs,
                aes(x = h.order,
                    y = as.numeric(effect.coef), 
                    color = effect.p < .05)) +
  geom_point(size = 1) +
  scale_color_manual(values = sig.colors) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  labs(x = "", y = 'Estimate') + 
  theme_minimal(base_size = 11) +
  theme( legend.position = "none") + #This removes the legend
  theme(axis.title.x = element_text(face = "bold", size = 12)) + # Edit the typeface on the x axis title
  theme(axis.title.y = element_text(face = "bold", size = 12, vjust = .5)) + # Edit the typeface on the y axis title
  theme(axis.text.x = element_text(size = 10)) + # Edit the typeface on the x axis text 
  theme(axis.text.y = element_text(size = 10)) + # Edit the typeface on the y axis text
  theme(axis.line = element_line(colour = "black")) +
  geom_pointrange(aes(x = h.order,
                      y = effect.coef,
                      ymin = effect.lb,
                      ymax = effect.ub, 
                      color = effect.p < .05),
                  alpha = 0.2,
                  size = .2,
                  fatten = .2) +
  geom_point(size = .2, 
             color = 'black')


controls.vec <- stringr::str_extract_all(specs$controls, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.c', sep = '') 
controls.vec <- controls.vec[controls.vec != "1.c" & controls.vec != "0.c"]
fixed.effects.vec <- stringr::str_extract_all(specs$fixed.effects, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.fe', sep = '')
data.vec <- stringr::str_extract_all(specs$data, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.d', sep = '')
se.vec <- stringr::str_extract_all(specs$cluster.se, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.se', sep = '')
se.vec <- se.vec[se.vec != "1.se" & se.vec != "0.se"]

# Choices will be a transformation of specs
choices <- specs |>
  # Made long on everything that is not a result OR input
  pivot_longer(c(all_of(se.vec),
                 all_of(fixed.effects.vec),
                 all_of(controls.vec), 
                 all_of(data.vec)), names_to = 'Variable') |># Call variables variable
  mutate(Variable = as.factor(Variable), #Set Control to factor
         value = ifelse(value != 0, "|", ""),
         Purpose = factor(ifelse(Variable %in% controls.vec, 'Controls', 
                                 ifelse(Variable %in% data.vec, 'Data', 
                                        ifelse(Variable %in% fixed.effects.vec,'FE', 
                                               ifelse(Variable %in% se.vec, 'SE', 'DV')))),
                          levels = c('Data', 'FE', 'SE', 'Controls', 'DV')),
         Variable = as.factor(sub("\\..*", "", Variable)))|>
  as.data.table() |>
  ggplot(aes(h.order, Variable)) +
  facet_grid(Purpose~., scales = 'free', space = 'free') +
  theme(strip.text.y = element_text(size = 10, angle = 0)) + 
  geom_text(aes(label = value), size = 2) +
  scale_color_manual(values = sig.colors) +
  labs(x = "\nSpecification number", y = "Variables\n") + 
  theme( legend.position = "none") + #This removes the legend
  theme(axis.title.x = element_text(face = "bold", size = 12)) + # Edit the typeface on the x axis title
  theme(axis.title.y = element_text(face = "bold", size = 12, vjust = .5)) + # Edit the typeface on the y axis title
  theme(axis.text.x = element_text(size = 10)) + # Edit the typeface on the x axis text 
  theme(axis.text.y = element_text(size = 10)) + # Edit the typeface on the y axis text
  theme(panel.background = element_blank(), axis.line = element_line(colour = "black"))


cowplot::plot_grid(curve, choices, ncol = 1, align = "v", axis = 'l,r', labels = c('', ''))

# With text
specs <- fread("s1_specification_curve_text.csv")
specs$ci_width <- specs$effect.ub - specs$effect.lb
#| fig-cap: "Results from Specification Curve Analysis With Sentiment as DV of Study 1"
#| fig-height: 7
#| fig-width: 6
specs <- specs |>
  filter(!is.na(specs$effect.ub)) |>
  filter(ci_width <= quantile(specs$ci_width, na.rm = T, probs = .95)[[1]]) |>
  dplyr::mutate(effect.coef = as.numeric(effect.coef),
                effect.p = as.numeric(effect.p),
                effect.ub = as.numeric(effect.ub),
                effect.lb = as.numeric(effect.lb)) |>
  dplyr::arrange(-effect.coef) |>
  dplyr::mutate(h.order = 1:n()) |>
  data.table::as.data.table()

sig.colors = c('grey30', 'grey60')

curve <- ggplot(data = specs,
                aes(x = h.order,
                    y = as.numeric(effect.coef), 
                    color = effect.p < .05)) +
  geom_point(size = 1) +
  scale_color_manual(values = sig.colors) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  labs(x = "", y = 'Estimate') + 
  theme_minimal(base_size = 11) +
  theme( legend.position = "none") + #This removes the legend
  theme(axis.title.x = element_text(face = "bold", size = 12)) + # Edit the typeface on the x axis title
  theme(axis.title.y = element_text(face = "bold", size = 12, vjust = .5)) + # Edit the typeface on the y axis title
  theme(axis.text.x = element_text(size = 10)) + # Edit the typeface on the x axis text 
  theme(axis.text.y = element_text(size = 10)) + # Edit the typeface on the y axis text
  theme(axis.line = element_line(colour = "black")) +
  geom_pointrange(aes(x = h.order,
                      y = effect.coef,
                      ymin = effect.lb,
                      ymax = effect.ub, 
                      color = effect.p < .05),
                  alpha = 0.2,
                  size = .2,
                  fatten = .2) +
  geom_point(size = .2, 
             color = 'black')


controls.vec <- stringr::str_extract_all(specs$controls, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.c', sep = '') 
controls.vec <- controls.vec[controls.vec != "1.c" & controls.vec != "0.c"]
fixed.effects.vec <- stringr::str_extract_all(specs$fixed.effects, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.fe', sep = '')
data.vec <- stringr::str_extract_all(specs$data, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.d', sep = '')
se.vec <- stringr::str_extract_all(specs$cluster.se, '\\b[^+*:\\s]+\\b') |>
  unlist() |>
  unique() |>
  paste('.se', sep = '')
se.vec <- se.vec[se.vec != "1.se" & se.vec != "0.se"]

# Choices will be a transformation of specs
choices <- specs |>
  # Made long on everything that is not a result OR input
  pivot_longer(c(all_of(se.vec),
                 all_of(fixed.effects.vec),
                 all_of(controls.vec), 
                 all_of(data.vec)), names_to = 'Variable') |># Call variables variable
  mutate(Variable = as.factor(Variable), #Set Control to factor
         value = ifelse(value != 0, "|", ""),
         Purpose = factor(ifelse(Variable %in% controls.vec, 'Controls', 
                                 ifelse(Variable %in% data.vec, 'Data', 
                                        ifelse(Variable %in% fixed.effects.vec,'FE', 
                                               ifelse(Variable %in% se.vec, 'SE', 'DV')))),
                          levels = c('Data', 'FE', 'SE', 'Controls', 'DV')),
         Variable = as.factor(sub("\\..*", "", Variable)))|>
  as.data.table() |>
  ggplot(aes(h.order, Variable)) +
  facet_grid(Purpose~., scales = 'free', space = 'free') +
  theme(strip.text.y = element_text(size = 10, angle = 0)) + 
  geom_text(aes(label = value), size = 2) +
  scale_color_manual(values = sig.colors) +
  labs(x = "\nSpecification number", y = "Variables\n") + 
  theme( legend.position = "none") + #This removes the legend
  theme(axis.title.x = element_text(face = "bold", size = 12)) + # Edit the typeface on the x axis title
  theme(axis.title.y = element_text(face = "bold", size = 12, vjust = .5)) + # Edit the typeface on the y axis title
  theme(axis.text.x = element_text(size = 10)) + # Edit the typeface on the x axis text 
  theme(axis.text.y = element_text(size = 10)) + # Edit the typeface on the y axis text
  theme(panel.background = element_blank(), axis.line = element_line(colour = "black"))


cowplot::plot_grid(curve, choices, ncol = 1, align = "v", axis = 'l,r', labels = c('', ''))

#####
# WEB APPENDIX H
draw_label_theme <- function(label, theme = NULL, element = "text", ...) {
  if (is.null(theme)) {
    theme <- ggplot2::theme_get()
  }
  if (!element %in% names(theme)) {
    stop("Element must be a valid ggplot theme element name")
  }
  
  elements <- ggplot2::calc_element(element, theme)
  
  cowplot::draw_label(label, 
                      fontfamily = elements$family,
                      fontface = elements$face,
                      colour = elements$color,
                      size = elements$size,
                      ...
  )
}

######
# Main result from text, over time
# 1. Prepare the gain and lose data
## GAIN
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

## LOSE
lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
## GAIN
att_gain_vrbo <- att_gt(yname = "rating",
                        tname = "Quarter",
                        idname = "ID",
                        clustervars = "id",
                        gname = "G",
                        data = gain_did,
                        allow_unbalanced_panel = T
)
gain_vrbo_agg.es <- aggte(att_gain_vrbo, type = "group")

### Include controls
att_gain_vrbo_controls <- att_gt(yname = "rating",
                                 tname = "Quarter",
                                 idname = "ID",
                                 clustervars = "id",
                                 gname = "G",
                                 xformla = ~price.win + host_listings_count + ratings_LQ,
                                 data = gain_did,
                                 allow_unbalanced_panel = T,
                                 panel = T
)
gain_vrbo_controls_agg.es <- aggte(att_gain_vrbo_controls, type = "group")

## LOSE
att_lose_vrbo <- att_gt(yname = "rating",
                        tname = "Quarter",
                        idname = "ID",
                        clustervars = "id",
                        gname = "G",
                        data = lose_did,
                        allow_unbalanced_panel = T
)
lose_vrbo_agg.es <- aggte(att_lose_vrbo, type = "group")

### Include controls
att_lose_vrbo_controls <- att_gt(yname = "rating",
                                 tname = "Quarter",
                                 idname = "ID",
                                 clustervars = "id",
                                 gname = "G",
                                 xformla = ~price.win + host_listings_count + ratings_LQ,
                                 data = lose_did,
                                 allow_unbalanced_panel = T,
                                 panel = T
)
lose_vrbo_controls_agg.es <- aggte(att_lose_vrbo_controls, type = "group")

# Create function to plot
plot_groups <- function(aggregated.es){
  dat <- data.frame(
    Quarter = c("Overall", aggregated.es$egt),
    ATT = c(aggregated.es$overall.att, aggregated.es$att.egt),
    lb = c(aggregated.es$overall.att - 1.96 * aggregated.es$overall.se, 
           aggregated.es$att.egt - aggregated.es$crit.val.egt * aggregated.es$se.egt),
    ub = c(aggregated.es$overall.att + 1.96 * aggregated.es$overall.se, 
           aggregated.es$att.egt + aggregated.es$crit.val.egt * aggregated.es$se.egt)
  )
  
  ovr_plt <- dat |>
    filter(Quarter == 'Overall') |>
    ggplot(aes(y=Quarter, x = ATT, xmin = lb, xmax = ub)) +
    geom_linerange(linewidth = 1) +
    geom_point(size = 5) +
    geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
    coord_cartesian(xlim = c(min(dat$lb), max(dat$ub))) +
    geom_point(size = 3, color = "white") +
    theme_bw() +
    theme(legend.position = "none") +
    labs(
      x = "ATT",
      y = "",
      title = ""
    ) +
    theme(
      axis.title = element_text(size = 12),  # Increase axis title size
      axis.text.x = element_text(size = 16, angle = 0),   
      axis.text.y = element_text(size = 16, angle = 0),
      strip.text = element_text(size = 10)   # Increase facet title size
    )
  
  sub_plt <- dat |>
    filter(Quarter != 'Overall') |>
    ggplot(aes(y=Quarter, x = ATT, xmin = lb, xmax = ub)) +
    geom_linerange(linewidth = 1) +
    geom_point(size = 5) +
    geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
    coord_cartesian(xlim = c(min(dat$lb), max(dat$ub))) +
    geom_point(size = 3, color = "white") +
    theme_bw() +
    theme(legend.position = "none") +
    labs(
      x = "ATT",
      y = "Quarter",
      title = ""
    ) +
    theme(
      axis.title = element_text(size = 12),  # Increase axis title size
      axis.text.x = element_text(size = 16, angle = 0),   
      axis.text.y = element_text(size = 16, angle = 0),
      strip.text = element_text(size = 10)   # Increase facet title size
    )
  
  plot_grid(ovr_plt, sub_plt, ncol = 1, align = "v", rel_heights = c(1,6))
}
# Disaggregated--gaining status, no controls
pa <- plot_groups(gain_vrbo_agg.es)

# With controls
pb <- plot_groups(gain_vrbo_controls_agg.es)

cowplot::plot_grid(pa, pb, ncol = 2, 
                   labels = c("A.", "B."), label_size = 20, label_x = 0, label_y = 1.05)

#| label: fig-disaggregated_lose
#| fig-cap: "Losing Superhost Status: Disaggregated by Quarter"
#| fig-height: 7
#| fig-width: 6
# Disaggregated--losing status, no controls
pc <- plot_groups(lose_vrbo_agg.es)
# With controls
pd <- plot_groups(lose_vrbo_controls_agg.es)
cowplot::plot_grid(pc, pd, ncol = 2, 
                   labels = c("A.", "B."), label_size = 20, label_x = 0, label_y = 1.05)

#### Analysis of subsets of listings

#| fig-cap: "Gaining Superhost Status: Effects Within Subgroups"
#| fig-height: 7
#| fig-width: 6
# THERE ARE FOUR STEPS TO ESTIMATING THESE MODELS
### 1. Prepare the gain and lose data
### 2. Estimate models and save
### 3. Create plots
### 4. Create summary table

#####
# Main result in text

# 1. Prepare the gain and lose data
## GAIN
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

## LOSE
lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- data.frame(
  mod = rep('Overall',2),
  controls = c('No', 'Yes'),
  lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
  att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
  ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
)

lose_table <- data.frame(
  mod = rep('Overall',2),
  controls = c('No', 'Yes'),
  lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
  att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
  ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
)

##### 
# Listings only changing once:

# 1. Prepare the gain and lose data
## GAIN
gain_did <- dl[dl$did_group == "Gain" & !is.na(dl$idxpid),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

## LOSE
lose_did <- dl[dl$did_group == "Lose" & !is.na(dl$idxpid),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('One Change in Status',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |> 
  rbind(data.frame(
    mod = rep('One Change in Status',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings changing multiple times:
# 1. Prepare the gain and lose data
## GAIN
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & dl$did_group == "Both",]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

## LOSE
lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & dl$did_group == "Both",]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Multiple Changes in Status',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |> 
  rbind(data.frame(
    mod = rep('Multiple Changes in Status',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings changing status multiple times, single listing hosts
# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & !is.na(dl$single_listing_host_id),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & !is.na(dl$single_listing_host_id),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Single Listing Host',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Single Listing Host',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings from multiple listing hosts
# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & is.na(dl$single_listing_host_id),]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & is.na(dl$single_listing_host_id),]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models

# 2. Estimate models and save
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Multi Listing Host',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Multi Listing Host',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

#####
# By price

# First, calculate price quantiles
prices <- dl |>
  group_by(id) |>
  summarise(price.win = mean(price.win, na.rm = T))
dl$price_cat <- ifelse(dl$id %in% prices[prices$price.win <= quantile(prices$price.win, probs = c(.5))[[1]],
]$id, "Low", "High")

#####
# Low priced listings
# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & dl$price_cat == "Low",]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & dl$price_cat == "Low",]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Lower 50% of Price',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Lower 50% of Price',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# High priced listings
# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & dl$price_cat == "High",]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & dl$price_cat == "High",]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Upper 50% of Price',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Upper 50% of Price',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))


##### 
# Listings whose prices are higher as superhosts
pre_change_prices <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid),] |>
  filter(platform != "Vrbo") |>
  group_by(id, superhost) |>
  summarise(price = mean(price.win, na.rm = T)) |>
  pivot_wider(names_from = superhost, 
              values_from = price, 
              names_prefix = "superhost_") |>
  mutate(price_difference = superhost_1 - superhost_0)

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% pre_change_prices[pre_change_prices$price_difference >=
                                                quantile(pre_change_prices$price_difference, na.rm = T)[[3]],]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)


pre_change_prices <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid),] |>
  filter(platform != "Vrbo") |>
  group_by(id, superhost) |>
  summarise(price = mean(price.win, na.rm = T)) |>
  pivot_wider(names_from = superhost, 
              values_from = price, 
              names_prefix = "superhost_") |>
  mutate(price_difference = superhost_1 - superhost_0)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) &
                 dl$id %in% pre_change_prices[pre_change_prices$price_difference >=
                                                quantile(pre_change_prices$price_difference, na.rm = T)[[3]],]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Upper 50% Price Increase as Superhost',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Upper 50% Price Increase as Superhost',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings whose prices are not higher as superhosts
pre_change_prices <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid),] |>
  filter(platform != "Vrbo") |>
  group_by(id, superhost) |>
  summarise(price = mean(price.win, na.rm = T)) |>
  pivot_wider(names_from = superhost, 
              values_from = price, 
              names_prefix = "superhost_") |>
  mutate(price_difference = superhost_1 - superhost_0)

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% pre_change_prices[pre_change_prices$price_difference <
                                                quantile(pre_change_prices$price_difference, na.rm = T)[[3]],]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)


pre_change_prices <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid),] |>
  filter(platform != "Vrbo") |>
  group_by(id, superhost) |>
  summarise(price = mean(price.win, na.rm = T)) |>
  pivot_wider(names_from = superhost, 
              values_from = price, 
              names_prefix = "superhost_") |>
  mutate(price_difference = superhost_1 - superhost_0)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) &
                 dl$id %in% pre_change_prices[pre_change_prices$price_difference <
                                                quantile(pre_change_prices$price_difference, na.rm = T)[[3]],]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Lower 50% Price Increase as Superhost',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Lower 50% Price Increase as Superhost',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))


##### 
# Listings by accommodates -- small
listings_acc <- d |>
  group_by(id) |>
  summarise(accommodates = mean(accommodates, na.rm = T)) |>
  mutate(small = ifelse(accommodates <= 4, 1, 0))

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_acc[listings_acc$small == 1,]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_acc[listings_acc$small == 1,]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Smallest 50% (Accommodates)',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Smallest 50% (Accommodates)',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings by accommodates -- big

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_acc[listings_acc$small == 0,]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_acc[listings_acc$small == 0,]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep('Largest 50% (Accommodates)',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep('Largest 50% (Accommodates)',2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings by amenities -- small
listings_am <- d |>
  group_by(id) |>
  summarise(Amenities = mean(Amenities, na.rm = T)) |>
  mutate(small = ifelse(Amenities <= 36, 1, 0))

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_am[listings_am$small == 1,]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_am[listings_am$small == 1,]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep("Fewest 50% Amenities Listed",2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep("Fewest 50% Amenities Listed",2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))

##### 
# Listings by amenities -- big

# 1. Make Data for gain and lose
gain_did <- dl[dl$did_group_first == "Gain" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_am[listings_am$small == 0,]$id,]
gain_did$G <- as.numeric(ifelse(gain_did$platform == "Vrbo", 0, 
                                substr(gain_did$exp_group_first,2,2)))
gain_did$Quarter <- as.numeric(gain_did$Quarter)
gain_did$ID <- as.numeric(ifelse(gain_did$G == 0, -as.numeric(gain_did$id),
                                 gain_did$id))
gain_did$id <- as.numeric(gain_did$id)

quantile(pre_change_prices$price_difference, na.rm = T)

lose_did <- dl[dl$did_group_first == "Lose" & !is.na(dl$idxpid) & 
                 dl$id %in% listings_am[listings_am$small == 0,]$id,]
lose_did$G <- as.numeric(ifelse(lose_did$platform == "Vrbo", 0, 
                                substr(lose_did$exp_group_first,2,2)))
lose_did$Quarter <- as.numeric(lose_did$Quarter)
lose_did$ID <- as.numeric(ifelse(lose_did$G == 0, -as.numeric(lose_did$id),
                                 lose_did$id))
lose_did$id <- as.numeric(lose_did$id)

#2. Fit Models
bnb_vrbo_did <- combine_did_summary_dynamic(yname = "rating",
                                            tname = "Quarter",
                                            idname = "ID",
                                            clustervars = "id",
                                            gname = "G",
                                            data_names = c("Gain", "Lose"),
                                            data_list = list(gain_did, lose_did),
                                            xformla = list(~price.win + host_listings_count + ratings_LQ),
                                            allow_unbalanced_panel = T
)

gain_table <- gain_table |>
  rbind(data.frame(
    mod = rep("Most 50% Amenities Listed",2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][1,"lb"], bnb_vrbo_did[[1]][3,"lb"]),
    att = c(bnb_vrbo_did[[1]][1,"att"], bnb_vrbo_did[[1]][3,"att"]),
    ub = c(bnb_vrbo_did[[1]][1,"ub"], bnb_vrbo_did[[1]][3,"ub"])
  ))

lose_table <- lose_table |>
  rbind(data.frame(
    mod = rep("Most 50% Amenities Listed",2),
    controls = c('No', 'Yes'),
    lb = c(bnb_vrbo_did[[1]][2,"lb"], bnb_vrbo_did[[1]][4,"lb"]),
    att = c(bnb_vrbo_did[[1]][2,"att"], bnb_vrbo_did[[1]][4,"att"]),
    ub = c(bnb_vrbo_did[[1]][2,"ub"], bnb_vrbo_did[[1]][4,"ub"])
  ))



gain_table$mod <- factor(gain_table$mod,
                         levels = c("Overall",
                                    "One Change in Status",
                                    "Multiple Changes in Status",
                                    "Single Listing Host",
                                    "Multi Listing Host",
                                    "Lower 50% of Price",
                                    "Upper 50% of Price",
                                    "Lower 50% Price Increase as Superhost",
                                    "Upper 50% Price Increase as Superhost",
                                    "Smallest 50% (Accommodates)",
                                    "Largest 50% (Accommodates)",
                                    "Fewest 50% Amenities Listed",
                                    "Most 50% Amenities Listed"))

gain_table$controls <- factor(gain_table$controls,
                              levels = c("Yes", "No"))

overall_gain <- gain_table |>
  filter(mod == 'Overall') |>
  ggplot(aes(y=mod, x = att, xmin = lb, xmax = ub, color = controls, fill = controls)) +
  geom_linerange(linewidth = 1, position = position_dodge(.5)) +
  geom_point(size = 5, position = position_dodge(.5)) +
  geom_point(size = 3, color = "white", position = position_dodge(.5)) +
  geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  scale_fill_manual(values = c( "white", "white")) +
  coord_cartesian(xlim = c(min(gain_table$lb), max(gain_table$ub))) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(
    x = "ATT",
    y = "",
    title = "Gaining Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text.x = element_text(size = 12, angle = 0),   
    axis.text.y = element_text(size = 12, angle = 0),
    strip.text = element_text(size = 10)   # Increase facet title size
  )

subsets_gain <- gain_table |>
  filter(mod != 'Overall') |>
  ggplot(aes(y=mod, x = att, xmin = lb, xmax = ub, color = controls, fill = controls)) +
  geom_linerange(linewidth = 1, position = position_dodge(.5)) +
  geom_point(size = 5, position = position_dodge(.5)) +
  geom_point(size = 3, color = "white", position = position_dodge(.5)) +
  geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  scale_fill_manual(values = c( "white", "white")) +
  coord_cartesian(xlim = c(min(gain_table$lb), max(gain_table$ub))) +
  theme_bw() +
  #theme(legend.position = "none") +
  labs(
    y = "Subset of Data",
    x = "ATT",
    subtitle = ""
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text.x = element_text(size = 12, angle = 0),   
    axis.text.y = element_text(size = 12, angle = 0),
    strip.text = element_text(size = 10)   # Increase facet title size
  )

cowplot::plot_grid(overall_gain, subsets_gain, ncol = 1, align = 'v', rel_heights = c(2, 12))

lose_table$mod <- factor(lose_table$mod,
                         levels = c("Overall",
                                    "One Change in Status",
                                    "Multiple Changes in Status",
                                    "Single Listing Host",
                                    "Multi Listing Host",
                                    "Lower 50% of Price",
                                    "Upper 50% of Price",
                                    "Lower 50% Price Increase as Superhost",
                                    "Upper 50% Price Increase as Superhost",
                                    "Smallest 50% (Accommodates)",
                                    "Largest 50% (Accommodates)",
                                    "Fewest 50% Amenities Listed",
                                    "Most 50% Amenities Listed"))

lose_table$controls <- factor(lose_table$controls,
                              levels = c("Yes", "No"))

overall_lose <- lose_table |>
  filter(mod == 'Overall') |>
  ggplot(aes(y=mod, x = att, xmin = lb, xmax = ub, color = controls, fill = controls)) +
  geom_linerange(linewidth = 1, position = position_dodge(.5)) +
  geom_point(size = 5, position = position_dodge(.5)) +
  geom_point(size = 3, color = "white", position = position_dodge(.5)) +
  geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  scale_fill_manual(values = c( "white", "white")) +
  coord_cartesian(xlim = c(min(lose_table$lb), max(lose_table$ub))) +
  theme_bw() +
  theme(legend.position = "none") +
  labs(
    x = "ATT",
    y = "",
    title = "Losing Superhost Status"
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text.x = element_text(size = 12, angle = 0),   
    axis.text.y = element_text(size = 12, angle = 0),
    strip.text = element_text(size = 10)   # Increase facet title size
  )

subsets_lose <- lose_table |>
  filter(mod != 'Overall') |>
  ggplot(aes(y=mod, x = att, xmin = lb, xmax = ub, color = controls, fill = controls)) +
  geom_linerange(linewidth = 1, position = position_dodge(.5)) +
  geom_point(size = 5, position = position_dodge(.5)) +
  geom_point(size = 3, color = "white", position = position_dodge(.5)) +
  geom_vline(xintercept = 0, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "grey50", "black")) +
  scale_fill_manual(values = c( "white", "white")) +
  coord_cartesian(xlim = c(min(lose_table$lb), max(lose_table$ub))) +
  theme_bw() +
  #theme(legend.position = "none") +
  labs(
    y = "Subset of Data",
    x = "ATT",
    subtitle = ""
  ) +
  theme(
    axis.title = element_text(size = 12),  # Increase axis title size
    axis.text.x = element_text(size = 12, angle = 0),   
    axis.text.y = element_text(size = 12, angle = 0),
    strip.text = element_text(size = 10)   # Increase facet title size
  )

cowplot::plot_grid(overall_lose, subsets_lose, ncol = 1, align = 'v', rel_heights = c(2, 12))


# FOR BLOG

predidgain_btw <- bnb_btw_did[[2]][[1]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "#325D88", "#17a2b8")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter",
    y = "Rating Difference",
  ) +
  theme(
    axis.title = element_text(size = 16),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

predidgain_vrbo <- bnb_vrbo_did[[2]][[1]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "#325D88", "#17a2b8")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter",
    y = "Rating Difference",
  ) +
  theme(
    axis.title = element_text(size = 16),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

predidlose_btw <- bnb_btw_did[[2]][[2]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "#325D88", "#17a2b8")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.1,.2)) +
  scale_x_continuous(breaks = seq(min(bnb_btw_did[[2]][[1]]$tname), max(bnb_btw_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter",
    y = "Rating Difference",
  ) +
  theme(
    axis.title = element_text(size = 16),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )

predidlose_vrbo <- bnb_vrbo_did[[2]][[2]] |>
  mutate(pre = ifelse(tname < 0, "A", "B")) |>
  ggplot(aes(x = tname, y = att, color = pre)) +
  geom_point() +
  geom_errorbar(aes(ymin = lb, ymax = ub), width = .5) +
  geom_hline(yintercept = 0, linetype = 'dotted', linewidth = .8) +
  geom_vline(xintercept = -.5, linetype = 'dotted', linewidth = .8) +
  scale_color_manual(values = c( "#325D88", "#17a2b8")) +
  theme_bw() +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(-.3,.6)) +
  scale_x_continuous(breaks = seq(min(bnb_vrbo_did[[2]][[1]]$tname), max(bnb_vrbo_did[[2]][[1]]$tname), by = 1)) +  # Set x-axis labels
  labs(
    x = "Quarter",
    y = "Rating Difference",
    subtitle = ""
  ) +
  theme(
    axis.title = element_text(size = 16),  # Increase axis title size
    axis.text = element_text(size = 12),   # Increase axis text size
    strip.text = element_text(size = 12)   # Increase facet title size
  )


cowplot::plot_grid(predidgain_btw, 
                   predidlose_btw,
                   align = 'v', 
                   labels = c("Gain Status", "Lose Status"), 
                   label_size = 20,
                   label_x = .05,
                   label_y = 1.08,
                   ncol=2,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.1, 0, 0, 0), "cm"))


cowplot::plot_grid(predidgain_vrbo, 
                   predidlose_vrbo,
                   align = 'v', 
                   labels = c("Gain Status", "Lose Status"), 
                   label_size = 20,
                   label_x = .05,
                   label_y = 1.08,
                   ncol=2,
                   rel_heights = c(1, 1),
                   rel_widths = c(1, 1)
) + 
  theme(plot.margin = unit(c(1.1, 0, 0, 0), "cm"))
